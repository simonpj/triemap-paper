@article{hamt,
  author = {Bagwell, Phil},
  year = {2001},
  month = {11},
  pages = {},
  title = {Ideal Hash Trees}
}
@article{adams,
  title={Functional Pearls Efficient sets—a balancing act},
  volume={3},
  DOI={10.1017/S0956796800000885},
  number={4},
  journal={Journal of Functional Programming},
  publisher={Cambridge University Press},
  author={Adams, Stephen},
  year={1993},
  pages={553–561}
}
@article{debruijn,
  title = {Lambda calculus notation with nameless dummies, a tool for automatic formula manipulation, with application to the Church-Rosser theorem},
  journal = {Indagationes Mathematicae (Proceedings)},
  volume = {75},
  number = {5},
  pages = {381-392},
  year = {1972},
  issn = {1385-7258},
  doi = {https://doi.org/10.1016/1385-7258(72)90034-0},
  author = {N.G {de Bruijn}},
}
@thesis{santos,
   abstract = {In this thesis we present and analyse a set of automatic source-to-source\nprogram transformations that are suitable for incorporation in optimising\ncompilers for lazy functional languages. These transformations improve\nthe quality of code in many different respects, such as execution\ntime and memory usage. The transformations presented are divided\nin two sets: global transformations, which are performed once (or\nsometimes twice) during the compilation process; and a set of local\ntransformations, which are performed before and after each of the\nglobal transformations, so that they can simplify the code before\napplying the global transformations and also take advantage of them\nafterwards. Many of the local transformations are simple, well known,\nand do not have major effects on their own. They become important\nas they interact with each other and with global transformations,\nsometimes in non-obvious ways. We present how and why they improve\nthe code, and perform extensive experiments with real application\nprograms. We describe four global transformations, two of which have\nnot been used in any lazy functional compiler we know of: the static\nargument transformation and let foating transformations. The other\ntwo are well known transformations for lazy functional languages,\nbut for which no major studies of their e ects have been performed:\nfull laziness and lambda lifting. We also study and measure the e\nects of di erent inlining strategies.\n\nWe also present a Cost Semantics as a way of reasoning about the e\nects of program transformations in lazy functional languages.},
   author = {Adré Luís De Medeiros Santos},
   isbn = {0520239601 (alk. paper)},
   journal = {Science},
   pages = {218},
   title = {Compilation by Transformation in Non-Strict Functional Languages},
   year = {1995},
}

